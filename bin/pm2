#!/usr/bin/env node

var commander = require('commander');
var Monit = require('../lib/monit');
var UX = require('../lib/cli-ux.js');
var Log = require('../lib/Log.js');
var Satan = require('../satan.js');
var fs = require('fs');
var path = require('path');

const PREFIX_MSG        = '\x1B[32m% PM2\x1B[39m ';
const VERSION           = '1.0.1';
const SUCCESS_EXIT      = 0;
const ERROR_EXIT        = 1;
const SAMPLE_FILE_PATH  = '../lib/sample.json';
const DEFAULT_FILE_PATH = path.resolve(process.env.HOME, '.pm2');
const DEFAULT_LOG_PATH  = path.join(DEFAULT_FILE_PATH, 'logs');
const DEFAULT_PID_PATH  = path.join(DEFAULT_FILE_PATH, 'pids');

commander.version(VERSION)
         .option('-v --verbose', 'Display all data')
         .option('-f --force', 'Force actions')
         .option('-i --instances <number>', 'Lunch [number] instances (clustered with same socket)', parseInt)
         .option('-o --output [path]', 'Out log file output')
         .option('-e --error [path]', 'Error log file output')
         .option('-p --pid [pid]', 'Pid file')
         .option('-w --write', 'Write configuration in local folder')
         .usage('[cmd] app');

//
// Start command
//
commander.command('start <part>')
         .description('start specific part')
         .action(function(cmd) {
  if (cmd.indexOf('.json') > 0)
    CLI.startFromJson(cmd);
  else
    CLI.startFile(cmd, commander.instances);
});

//
// Stop All processes
//
commander.command('stop')
         .description('stop all processes')
         .action(function() {
  console.log(PREFIX_MSG + 'Stopping all processes');
  CLI.stopAll();
});

//
// Sample generate
//
commander.command('generate <name>')
         .description('generate sample JSON')
         .action(function(name) {
  CLI.generateSample(name);
});

//
// List command
//
commander.command('list')
         .description('list all processes')
         .action(function() {
  CLI.list();
});

//
// Monitoring command
//
commander.command('monit')
         .description('list all processes')
         .action(function() {
  CLI.monit();
});

//
// Flushing command
//
commander.command('flush')
         .description('flush logs')
         .action(function() {
  CLI.flush();
});

//
// Log streaming
//
commander.command('logs')
         .description('stream logs file')
         .action(function() {
  CLI.streamLogs();
});

//
// Kill
//
commander.command('kill')
         .description('kill daemon')
         .action(function() {
  CLI.killDaemon();
});

//
// Catch all
//
commander.command('*')
         .action(function() {
  console.log(PREFIX_MSG + '\nCommand not found');
  commander.outputHelp();
  process.exit(ERROR_EXIT);
});

//
// Display help
//
if (process.argv.length == 2) {
  commander.outputHelp();
  process.exit(ERROR_EXIT);
}

//
// Wait Satan is connected to God to launch parsing
//
process.on('satan:client:ready', function() {
  commander.parse(process.argv);
});

//
// Init
//
(function init() {
  fs.exists(DEFAULT_FILE_PATH, function(exist) {
    if (!exist) {
      fs.mkdirSync(DEFAULT_FILE_PATH);
      fs.mkdirSync(DEFAULT_LOG_PATH);
      fs.mkdirSync(DEFAULT_PID_PATH);
    }
  });
})();

var CLI = module.exports = {};

CLI.startFile = function(script, instances) {
  var appConf = {
    script : script,
    name : script
  };

  if (instances)
    appConf['instances'] = instances;
  if (commander.error)
    appConf['fileError'] = commander.error;
  if (commander.output)
    appConf['fileOutput'] = commander.output;
  if (commander.pid)
    appConf['pidFile'] = commander.pid;


  if (commander.write) {
    var dst_path = path.join(process.env.PWD, path.basename(script, '.js') + '-pm2.json');
    console.log(PREFIX_MSG + 'Writing configuration to ', dst_path);
    fs.writeFileSync(dst_path, JSON.stringify(appConf));
  }
  else {
    console.log(PREFIX_MSG + 'Configuration : ', appConf);
    console.log(PREFIX_MSG + 'You can write the current configuration by adding -w option');
  }

  Satan.executeRemote('findByScript', {script : appConf.script}, function(err, exec) {
      if (exec && !commander.force) {
        console.log(PREFIX_MSG + 'Script already launched, add -f option to force re execution');
        process.exit(ERROR_EXIT);
      }

      Satan.executeRemote('prepare', resolvePaths(appConf), function() {
        console.log(PREFIX_MSG + 'Process launched');
        speedList();
      });
    });
};

CLI.startFromJson = function(cmd) {
  var data = fs.readFileSync(cmd);
  var appConf = JSON.parse(data);

  if (Array.isArray(appConf)) {
    // Array of JSON, here it's for multiple and different applications
    (function ex(apps) {
      if (!apps[0]) return speedList();
      Satan.executeRemote('prepare', resolvePaths(apps[0]), function() {
        apps.shift();
        return ex(apps);
      });
    })(appConf);
  }
  else {
    // Here Standalone application
    Satan.executeRemote('findByScript', {script : appConf.script}, function(err, exec) {
      if (exec && !commander.force) {
        console.log(PREFIX_MSG + 'Script already launched, add -f option to force re execution');
        process.exit(ERROR_EXIT);
      }

      Satan.executeRemote('prepare', resolvePaths(appConf), function() {
        console.log(PREFIX_MSG + 'Process launched');
        speedList();
      });
    });
  }
};

CLI.stopAll = function() {
  Satan.executeRemote('stop', {}, function(err, list) {
    if (err) process.exit(ERROR_EXIT);
    UX.dispAsTable(list);
    process.exit(SUCCESS_EXIT);
  });
};

CLI.generateSample = function(name) {
  var sample = fs.readFileSync(path.join(__dirname, SAMPLE_FILE_PATH));
  var dt = sample.toString().replace(/VARIABLE/g, name);
  var f_name = name + '-pm2.json';

  fs.writeFileSync(path.join(process.env.PWD, f_name), dt);
  console.info('Sample generated on current folder\n%s :\n', f_name);
  console.info(dt);
  process.exit(SUCCESS_EXIT);
};

CLI.list = function() {
  Satan.executeRemote('list', {}, function(err, list) {
    if (err) process.exit(ERROR_EXIT);
    UX.dispAsTable(list);
    process.exit(SUCCESS_EXIT);
  });
};

CLI.flush = function() {
  Satan.executeRemote('list', {}, function(err, list) {
    if (err) process.exit(ERROR_EXIT);
    list.forEach(function(l) {
      console.log(PREFIX_MSG + 'Flushing');
      console.log(PREFIX_MSG + l.opts.pm_out_log_path);
      console.log(PREFIX_MSG + l.opts.pm_err_log_path);

      fs.openSync(l.opts.pm_out_log_path, 'w');
      fs.openSync(l.opts.pm_err_log_path, 'w');
    });
    process.exit(SUCCESS_EXIT);
  });
};

CLI.monit = function() {
  Satan.executeRemote('list', {}, function(err, list) {
    if (err) process.exit(ERROR_EXIT);
    Monit.init(list);

    function refresh(cb) {
      Satan.executeRemote('list', {}, function(err, list) {
	setTimeout(function() {
	  Monit.refresh(list);
	  refresh();
	}, 400);
      });
    }
    refresh();
  });
};

CLI.streamLogs = function() {
  Satan.executeRemote('list', {}, function(err, list) {
    if (err) process.exit(ERROR_EXIT);
    if (list && list.length == 0) {
      console.log(PREFIX_MSG + 'No processes online');
    }
    list.forEach(function(l) {
      if (l.opts.fileOutput) Log.stream(l.opts.fileOutput, l.opts.script + ' ' + l.pid);
      if (l.opts.fileError) Log.stream(l.opts.fileError);
    });
  });
};

CLI.killDaemon = function() {
  Satan.killDaemon(function(err, res) {
    if (err) {
      console.error('Error when killing daemon');
      process.exit(ERROR_EXIT);
    }
    console.info('Daemon killed');
    process.exit(SUCCESS_EXIT);
  });
};


//
// Private methods
//
function speedList() {
  Satan.executeRemote('list', {}, function(err, list) {
    UX.dispAsTable(list);
    process.exit(SUCCESS_EXIT);
  });
}

//
// Resolving path, seing if default ...
//
function resolvePaths(app) {
  app["pm_exec_path"]    = path.resolve(process.cwd(), app.script);

  fs.statSync(app.pm_exec_path);

  if (app.fileOutput)
    app["pm_out_log_path"] = path.resolve(process.cwd(), app.fileOutput);
  else {
    if (!app.name) {
      console.log(PREFIX_MSG + 'You havent specified log path, please specify at least a "name" field in the JSON');
      process.exit(ERROR_EXIT);
    }
    app["pm_out_log_path"] = path.resolve(DEFAULT_LOG_PATH, [app.name, '-out.log'].join(''));
    app.fileOutput = app["pm_out_log_path"];
  }

  if (app.fileError)
    app["pm_err_log_path"] = path.resolve(process.cwd(), app.fileError);
  else {
    app["pm_err_log_path"] = path.resolve(DEFAULT_LOG_PATH, [app.name, '-err.log'].join(''));
    app.fileError          = app["pm_err_log_path"];
  }

  if (app.pidFile)
    app["pm_pid_path"]     = path.resolve(process.cwd(), app.pidFile);
  else {
    app["pm_pid_path"]     = path.resolve(DEFAULT_PID_PATH, [app.name, '.pid'].join(''));
    app.pidFile            = app["pm_pid_path"];
  }

  fs.existsSync(app.pm_out_log_path);
  fs.existsSync(app.pm_err_log_path);

  return app;
}
